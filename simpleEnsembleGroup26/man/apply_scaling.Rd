% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_functions.R
\name{apply_scaling}
\alias{apply_scaling}
\title{Apply Scaling Parameters to New Data}
\usage{
apply_scaling(new_x, scale_params)
}
\arguments{
\item{new_x}{A dataframe containing the new data to be scaled. This dataframe
should include the same continuous variables that were present in the
original dataset from which the scaling parameters were derived.}

\item{scale_params}{A list containing the scaling parameters (mean and standard deviation)
for each continuous variable that was scaled in the training dataset.
Each entry in this list should have two elements:
\code{$mean} and \code{$sd}, representing the mean and standard deviation
used for scaling the corresponding variable.}
}
\value{
A dataframe (\code{new_x}) with the continuous variables scaled according to the provided
scaling parameters. Columns that not found in \code{scale_params} are left unchanged.
}
\description{
This function applies previously calculated scaling parameters (mean and standard deviation)
to the continuous variables in a new dataframe (\code{new_x}). It's designed to scale new data
using the scaling parameters derived from a training dataset. This ensures consistency
in feature scaling across both the training phase and when making predictions on new data.
}
\examples{
n = 100
training_data <- data.frame(
    feature_num1 = rnorm(n, mean = 5, sd = 2),  # Numerical feature
    feature_num2 = rnorm(n, mean = 55, sd = 42),  # Numerical feature
    feature_num3 = rnorm(n, mean = 544, sd = 52),  # Numerical feature
    feature_num4 = rnorm(n, mean = 59, sd = 16)  # Numerical feature
  )
scaled_training_data = scale_continuous_data(training_data)
n = 10
new_x <- data.frame(
    feature_num1 = rnorm(n, mean = 5, sd = 2),  # Numerical feature
    feature_num2 = rnorm(n, mean = 55, sd = 42),  # Numerical feature
    feature_num3 = rnorm(n, mean = 544, sd = 52),  # Numerical feature
    feature_num4 = rnorm(n, mean = 59, sd = 16)  # Numerical feature
  )
# Apply the obtained scaling parameters to the new data:
scaled_new_data <- apply_scaling(new_x, scaled_training_data$scale_params)

}
